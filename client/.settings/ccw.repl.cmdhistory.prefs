cmdhistory=["(start-client 5553)" "(send-message \\"yo\\")" "(send-message \\"hoho\\")" "(parse-string \\"a\\")" "(generate-string {\:foo \\"bar\\" \:baz 5})" "(use '(cheshire.core))" "(generate-string {\:foo \\"bar\\" \:baz 5})" "\\n(require [cheshire.core \:refer \:all])" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui2 namespace" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui2 namespace" "(create)" "(use 'clojure.repl)" "(doc as-file)" "(use 'clojure.java.io)" "(doc as-file)" "(source as-file)" "(file \\"resources/board.png\\")" "(.getAbsolutePath (file \\"resources/board.png\\"))" "(create)" "(show-options (label))" "(use 'seesaw.dev)" "(show-options (label))" "(show-options (icon))" "(show-options (icon nil))" "(show-options (icon (file \\"resources/board.png\\")))" "(create)" ";; Switching to client.gui namespace" "(creae)" "(create)" "(board-image)" "board-image" "(width board-image)" "(doc width)" "(use 'clojure.repl)" "(doc width)" "(source width)" "(.getIconWidth board-image)" "(-> (io/file board-image-src) icon .getIconWidth)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" "(options the-frame)" "(show-options the-frame)" "(use 'seesaw.dev)" "(show-options the-frame)" "(show-options (label))" "(create)" ";; Switching to client.gui namespace" "(create)" "(use 'seesaw.dev)" "(show-options (make-panel)\\n              )" "(defn make-panel []\\n  (do\\n  (xyz-panel\\r\\n    \:paint {\:after draw-board}\\r\\n    \:id \:xyz\\n    \:size [360 \:by 360]\\n    \:preferred-size [360 \:by 360]\\r\\n;    \:items\\n    )))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'client.gui)))" "(show-options (make-panel)\\n              )" ";; Switching to client.gui namespace" "(use 'seesaw.dev)" "(show-options (make-panel))" "(create)" ";; Switching to client.gui namespace" "(create)" "(/ 360 8)" "(use 'seesaw.dev)" "(show-options the-frame)" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" (rand-int 100) (rand-int 100))" "(add-piece-to-board \\"black\\" \\"queen\\" [(rand-int 100) (rand-int 100)])" "board-panel" "(add\! board-panel nil)" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [(rand-int 100) (rand-int 100)])" "(add\! (vertical-panel) \\"foo\\")" "(add\! (xyz-panel) \\"foo\\")" "(class (xyx-panel))" "(class (xyz-panel))" "(.add (xyz-panel) \\"foo\\")" "(to-widget (xyz-pane))" "(to-widget (xyz-panel))" "(.add (to-widget (xyz-panel)) (label))" "(.add (to-widget (xyz-panel)) (to-widget (label)))" "(to-widget (xyz-panel))" "(use 'seesaw.layour)" "(use 'seesaw.layout)" "(use 'seesaw.to-widget)" "(to-widget* (xyz-panel))" "(to-widget (xyz-panel))" "(add\!-impl (xyz-panel) \\"foo\\")" "(add-widget (xyz-panel) \\"FOO\\")" "(add-widge board-panel (label \:text \\"LOALALALALAL\\" \:location [50 50]))" "(add-widget board-panel (label \:text \\"LOALALALALAL\\" \:location [50 50]))" "(.validate (to-widget board-panel))" "(.validate the-frame)" "(.repaint the-frame)" "(create)" ";; Switching to client.gui namespace" "(use 'seesaw.to-widget)" "(use 'seesaw.layout)" "(add-widget board-panel (label \:text \\"THAUSHDUAHDUA\\" \:size [100 \:by 100]))" "(create)" "(.reapint the-frame)" "(.repaint the-frame)" "(add\! the-frame \\"FOOOOOOOOOOOOOOOOOOOOOO\\")" "(.revalidate board-panel)" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui2 namespace" ";; Switching to client.gui namespace" "(create)" ";; Switching to client.gui namespace" "(create)" "(use 'seesaw.layout)" "(add-widget board-panel (doto (label \:text \\"SISOKO WISHCE MACHE\\" \:location [60 60])\\r\\n                   (config\! \:bounds \:preferred)))" "(.revalidate board-panel)" "(.repaint the-frame)" "(add-widget board-panel (doto (label \:text \\"SISOKO WISHCE MACHE 2222\\" \:location [80 80])\\r\\n                   (config\! \:bounds \:preferred)))" "(.validate board-panel)" "(.repaint board-panel)" "(add\! board-panel (doto (label \:text \\"213123123\\" \:location [100 100])\\r\\n                      (config\! \:bounds \:preferred)))" "(.repaint board-panel)" ";; Switching to client.gui namespace" "(create)" "(add\! board-panel (doto (label \:text \\"213123123\\" \:location [100 100])\\r\\n                      (config\! \:bounds \:preferred)))" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(.repaint board-panel)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" ";; Switching to client.gui namespace" "(create)" "(format \\"resources/%s_%s.png\\" \\"queen\\" \\"black\\")" "(-> (format \\"resources/%s_%s.png\\" \\"queen\\" \\"black\\") io/file icon)" "(-> (format \\"resources/%s_%s.png\\" \\"queen\\" \\"black\\") io/file .exists)" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [60 60])" "(add-piece-to-board \\"black\\" \\"queen\\" [80 80])" "(doc move\!)" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [80 80])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [80 80])" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [80 80])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [180 180])" "(add-piece-to-board \\"black\\" \\"queen\\" [280 280])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [280 280])" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(.repaint board-panel)" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [50 50])" ";; Switching to client.gui namespace" "(to-square-center \\"a5\\")" "(parse chess-square-parser \\"a5\\"\\n       )" "(kern/parse chess-square-parser \\"a5\\"\\n       )" ";; Switching to client.gui namespace" "(to-square-center \\"b7\\")" "(parse chess-square-parser \\"b7\\"\\n       )" "(to-chess-square [[30 30]])" "(to-chess-square [30 30])" "(/ 30 45)" "(int (/ 30 45))" "(to-chess-square [30 30])" "(to-chess-square [30 50])" "(to-chess-square [30 (+ (* 45 7) 12)])" "(to-chess-square [70 (+ (* 45 7) 12)])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(.getComponentAt board-panel [41 41])" "(.getComponentAt board-panel \\n  41 41)" "(\!remove board-panel (.getComponentAt board-panel 41 41))" "(remove\! board-panel (.getComponentAt board-panel 41 41))" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" ";; Switching to client.gui namespace" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(create)" "(add-piece-to-board \\"black\\" \\"queen\\" [40 40])" "(\:a (\:b {\:c 12}))" "(val {\:a 12})" "(seq {\:a {\:b 12} \:c 22})" "(class (first (seq {\:a {\:b 12} \:c 22})))" "(key (first (seq {\:a {\:b 12} \:c 22})))" ";; Switching to client.core namespace" ";; Switching to client.gui namespace" ";; Switching to client.core namespace" "(-main)" "(ns client.core)" "(-main)" "(ns)" "ns" "(use 'client.core)" "(-main)" "(create-board)" "(ns client.core)" "(-main)" "(use 'client.core)" "ns" "*ns*" "end-point" "(require 'client.core)" "(-main)" "(requre 'client.core)" "(requre \\n  client.core)" "(require 'client.core)" "(clojure.core/ns client.board)\\n(defn draw-board [c g] (.drawImage g board-image 0 0 nil))\\n(clojure.core/ns client.core)" ";; Switching to client.core namespace" "*ns*" "(-main)" "(*ns*)" "*ns*" "(-main)" "(stop-client)" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.board namespace" "(ns client.core)" "(-main)" "(use 'client.core)" "(-main)" "(require 'client.core)" "(-main)" "(use 'client.utils)" "(format-squares chess-square-to-cell-center {\:foo \\"a\\" \:pieces [\\"a6\\" \\"b7\\"]})" "(format-squares chess-square-to-cell-center {\:foo \\"a\\" \:from \\"e4\\" \:pieces [\\"a6\\" \\"b7\\"]})" ";; Switching to client.player namespace" "(-main)" "*ns*" "(require 'client.core)" "(-main)" "(use 'client.core)" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" "@reader" "(await reader)" "reader" "(agent-error agent)" "(agent-error reader\\n             )" "(-main)" ";; Switching to client.player namespace" ";; Switching to client.core namespace" "(-main)" "reader" "(agent-error reader)" "(user 'client.player)" "(use\\n  'client.player)" "(format-squares chess-square-to-cell-center {\:content {\:player {\:pieces-color white, \:pieces {\:king [e1], \:queen [d1], \:bishop [f1 c1], \:knight [b1 g1], \:rook [a1 h1], \:pawn [c2 b2 a2 h2 g2 f2 e2 d2]}}, \:opponent {\:pieces-color black, \:pieces {\:king [e8], \:queen [d8], \:bishop [f8 c8], \:knight [g8 b8], \:rook [h8 a8], \:pawn [h7 g7 f7 e7 d7 c7 b7 a7]}}}, \:type start-game})" "(use 'client.utils)" "(format-squares chess-square-to-cell-center {\:content {\:player {\:pieces-color white, \:pieces {\:king [e1], \:queen [d1], \:bishop [f1 c1], \:knight [b1 g1], \:rook [a1 h1], \:pawn [c2 b2 a2 h2 g2 f2 e2 d2]}}, \:opponent {\:pieces-color black, \:pieces {\:king [e8], \:queen [d8], \:bishop [f8 c8], \:knight [g8 b8], \:rook [h8 a8], \:pawn [h7 g7 f7 e7 d7 c7 b7 a7]}}}, \:type start-game})" "(def t {\:content {\:player {\:pieces-color \\"white\\", \:pieces {\:king [e1], \:queen [d1], \:bishop [f1 c1], \:knight [b1 g1], \:rook [a1 h1], \:pawn [c2 b2 a2 h2 g2 f2 e2 d2]}}, \:opponent {\:pieces-color black, \:pieces {\:king [e8], \:queen [d8], \:bishop [f8 c8], \:knight [g8 b8], \:rook [h8 a8], \:pawn [h7 g7 f7 e7 d7 c7 b7 a7]}}}, \:type start-game}" "(def t {\:content {\:player {\:pieces-color \\"white\\", \:pieces {\:king [e1], \:queen [d1], \:bishop [f1 c1], \:knight [b1 g1], \:rook [a1 h1], \:pawn [c2 b2 a2 h2 g2 f2 e2 d2]}}, \:opponent {\:pieces-color black, \:pieces {\:king [e8], \:queen [d8], \:bishop [f8 c8], \:knight [g8 b8], \:rook [h8 a8], \:pawn [h7 g7 f7 e7 d7 c7 b7 a7]}}}, \:type start-game})" "(use 'cheshire.core)" "(parse-string \\"{\:pieces {\:king [e1], \:queen [d1], \:bishop [f1 c1], \:knight [b1 g1], \:rook [a1 h1], \:pawn [c2 b2 a2 h2 g2 f2 e2 d2]}}\\")" "(format-squares chess-square-to-cell-center {\:pieces {\:rook [\\"e1\\" \\"e2\\"]}})" "(format-squares chess-square-to-cell-center {\:pieces {\:rook [\\"e1\\" \\"e2\\"]} \:from \\"a6\\"})" "(seq \\"a6\\")" "(seq? \\"a5\\")" "(format-squares chess-square-to-cell-center {\:pieces {\:rook [\\"e1\\" \\"e2\\"]} \:from \\"a6\\"})" "(format-squares chess-square-to-cell-center {\:pieces {\:rook [\\"e1\\" \\"e2\\"]}})" "(seq? [1 2])" "(format-squares chess-square-to-cell-center {\:pieces {\:rook [\\"e1\\" \\"e2\\"]}})" "(format-squares chess-square-to-cell-center {\:pieces {\:rook [\\"e1\\" \\"e2\\"]} \:from \\"g6\\"})" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" "(reder)" "reader" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(let [*fu* \\"fu\\"]\\n  (future (bound-fn [] (println *fu*))))" "(let [*fu* \\"fu\\"]\\n  @(future (bound-fn [] (println *fu*))))" "(let [*fu* \\"fu\\"]\\n  @(future ((bound-fn [] (println *fu*)))))" "(let [*fu* \\"fu\\"]\\n  (future ((bound-fn [] (println *fu*)))))" "(let [*fu* \\"fu\\"]\\n  (future (println *fu*)))" "(let [*fu* \\"fuss\\"]\\n  (future (println *fu*)))" "(let [*fu* \\"fuss\\"]\\n  (future (Thread/sleep 2000) (println *fu*)))" "(def stop false)" "(def gosho (agent nil))" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (future \\n    (Thread/sleep 2000) \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(send-off gosho gosho-fn)" "(defn stop true)" "(def stop true)" "(-main)" "(def stop false)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (Thread/sleep 2000) \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(send-off gosho gosho-fn)" "gosho" "(send-off gosho gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (Thread/sleep 2000) \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(def stop false)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (Thread/sleep 2000) \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(send-off gosho gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (Thread/sleep 2000) \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (Thread/sleep 2000) \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (Thread/sleep 2000) \\n            (println \\"Gosho again\\" stop)\\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later\\n    ((bound-fn* []\\n                (when-not stop\\n                  (send-off *agent* \#'gosho-fn))))))" "(send-off gosho \#'gosho-fn)" "(restart-agent gosho)" "(restart-agent gosho true)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\r\\n  (invoke-later\\n    ((bound-fn* []\\n                (when-not stop\\n                  (send-off *agent* \#'gosho-fn))))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\n  ((bound-fn* []\\r\\n  (invoke-later\\n    \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn))))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\n  (future\\r\\n  (invoke-later\\n    \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn)))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\n  (future\\r\\n  (invoke-later\\n    \\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn)))))" "(send-off gosho \#'gosho-fn)" "(defn gosho-fn [_]\\r\\n  (println \\"Gosho\\")\\n  (future\\r\\n  (invoke-later\\n    (when-not stop\\n      (send-off *agent* \#'gosho-fn)))))" "(send-off gosho \#'gosho-fn)" ";; Switching to client.core namespace" "(-main)" "(use 'client.utils)" "(chess-square-to-cell-center \\"a8\\")" "(chess-square-to-cell-center \\"a7\\")" "(chess-square-to-cell-center \\"a9\\")" "(chess-square-to-cell-center \\"a8\\")" "(chess-square-to-cell-center \\"a6\\")" "(-main)" "(use 'client.player)" "(use 'client.utils)" "(format-squares coord-to-chess-square {\:from [43 56]})" "(let [[f & rest] [1 2 3 4 5]] f)" "(let [[f & rest] [1 2]] f)" "(let [[f & rest] [1]] f)" "(let [[f rest] [1]] f)" "(let [[f rest] [1 2 3 4]] f)" "(let [[f rest] [1 2 3 4]] rest)" "(let [[f s] [1 2 3 4]] )" "(let [[f s] [1 2 3 4]] s)" "(let [[f s] [1 [2 3 4]]] s)" "(format-squares chess-square-to-cell-center {\:pieces {\:queen [\\"a6\\" \\"a7\\"] \:king {\\"b5\\" \\"b5\\"}} \:from \\"g4\\"})" "(format-squares chess-square-to-cell-center {\:pieces {\:queen [\\"a6\\" \\"a7\\"] \:king {\\"b5\\" \\"b5\\"}}})" "(format-squares chess-square-to-cell-center {\:pieces {\:queen [\\"a6\\" \\"a7\\"] \:king [\\"b5\\" \\"b5\\"]}})" "(format-squares chess-square-to-cell-center {\:pieces {\:queen [\\"a6\\" \\"a7\\"] \:king [\\"b5\\" \\"b5\\"]} \:from \\"g6\\"})" "(format-squares chess-square-to-cell-center {\:pieces {\:queen [\\"a6\\" \\"a7\\"] \:king [\\"b5\\" \\"b5\\"]} \:from \\"a8\\"})" "(-main)" ";; Switching to client.player namespace" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [30 30] true)" "(add-piece-to-board \\"white\\" \\"queen\\" [200 200] true)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [200 200] true)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [200 200] true)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [200 200] true)" "(-main)" ";; Switching to client.core namespace" "(-main)" "player" "(\:socket @player)" "(.isClose (\:socket @player))" "(.isClosed (\:socket @player))" "(-main)" ";; Switching to client.core namespace" "(-main)" "(ns client.core)" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [30 30] true)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [30 30] true)" "(-main)" "(ns client.core)" "(-main)" "(use 'client.core)" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.player namespace" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" "(change-trurn)" "(-main)" "(change-turn)" "(client.player/change-turn)" "(use 'client.player)" "(change-trurn)" "(-main)" "(pirntln 1)" "(pirntln\\n  1)" "(println 1)" "(use 'client.board)" "(remove-widget (widget-at 25 25))" "(remove-widget (widget-at [25 25]))" ";; Switching to client.board namespace" ";; Switching to client.core namespace" "(-main)" "(.getComponentes board-panel)" "(.getComponents board-panel)" "(map \#(.contains % 23 23) (.getComponentes board-panel))" "(map \#(.contains % 23 23) (.getComponents board-panel))" "(map \#(.contains % 233 23) (.getComponents board-panel))" "(map \#(.contains % 26 24) (.getComponents board-panel))" "(.getBounds (.getComponentAt board-panel 54 54))" "(.getBounds (.getComponentAt board-panel 254 254))" "(.getBounds (.getComponentAt board-panel 66 66))" "(.getBounds (.getComponentAt board-panel 96 96))" "(.getBounds (.getComponentAt board-panel 112 112))" "(.getBounds (.getComponentAt board-panel 50 112))" "(.getComponentAt board-panel 50 112)" "(.getComponentAt board-panel 25 25)" "(.getComponentAt board-panel 25 55)" "(.getComponentAt board-panel 25 105)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [20 20] true)" "(add-piece-to-board \\"white\\" \\"queen\\" [40 40] true)" "(defn my-turn? true)" "(defn my-turn? (true))" "(defn my-turn? (\= 1 1))" "(defn my-turne? [] true)" "(defn my-turn? [] true)" "*ns*" "(ns *ns*)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [35 35])" "(add-piece-to-board \\"white\\" \\"queen\\" [35 35] true)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [35 35] true)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [35 35] true)" "(widget-at [30 30])" "(add-piece-to-board \\"black\\" \\"queen\\" [35 35] true)" "(widget-at [30 30])" "(.getComponents board-panel)" "(doseq [c (.getComponents board-panel)] c)" "(map println (.getCompontents board-panel))" "(map println (.getComponents board-panel))" "(defn deepest-widget-at [[x y]]\\n  (map (fn [c] (.contains c (- x (.getX c)) (- y (.getY c)))) (.getComponents board-panel)))" "(deepest-widget-at [[30 30]])" "(deepest-widget-at [30 30])" "(add-piece-to-board \\"black\\" \\"queen\\" [135 135] true)" "(deepest-widget-at [30 30])" "(defn deepest-widget-at [[x y]]\\n  (last (filter (fn [c] \\n            (.contains c (- x (.getX c)) (- y (.getY c)))) \\n          (.getComponents board-panel))))" "(deepest-widget-at [30 30])" "(-main)" "(use 'client.core)" "(-main)" ";; Switching to client.core namespace" "(use 'client.core)" "(-main)" "*ns*" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.board namespace" "(-main)" ";; Switching to client.board namespace" "(-main)" "(prn)" "(-main)" "(prn)" ";; Switching to client.core namespace" "(-main)" "(ns client.core)" "(-main)" "(\\n  def paction {\:promote {\:piece \:pawn, \:from [5 7]}})" "(\:promote paction)" "(vals (\:promote paction))" "(val (\:promote paction))" "(\:promote paction)" "(-main)" "(def pp \#{\:queen \:knight \:rook \:bishop})" "(pp (keyword \\"queen\\"))" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" "(get-opponent-color)" "{\:promotion (assoc {\:piece \\"queen\\" \:from [2 4]} \:piece-color (get-opponent-color))}" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" "(prn)" ";; Switching to client.core namespace" "(prn)" "(-main)" "(prn)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.board namespace" "(create-board)" "(add-piece-to-board \\"white\\" \\"queen\\" [30 30])" "(add-piece-to-board \\"white\\" \\"queen\\" [30 30] true)" "(add-piece-to-board \\"white\\" \\"queen\\" [60 60] true)" "(remove\! board-panel (.getComponents board-panel))" "(.repaint board-panel)" "(remove\! board-panel (.getComponents board-panel))" "(remove\! board-panel (seq (.getComponents board-panel)))" "(seq (.getComponents board-panel))" "(first (seq (.getComponents board-panel)))" "(remove\! board-panel (first (seq (.getComponents board-panel))))" "(add-piece-to-board \\"white\\" \\"queen\\" [60 60] true)" "(add-piece-to-board \\"white\\" \\"queen\\" [140 140] true)" "(remove\! board-panel (first (seq (.getComponents board-panel))))" "(apply remove\! (cons board-panel (.getComponents board-panel)))" "(add-piece-to-board \\"white\\" \\"queen\\" [140 140] true)" "(add-piece-to-board \\"white\\" \\"queen\\" [240 240] true)" "(apply remove\! board-panel (.getComponents board-panel))" "(select frame [\:\#xyz])" "(select the-frame [\:\#xyz])" "(create-board)" "(create)" ";; Switching to client.gui3 namespace" "(create)" ";; Switching to client.board namespace" "(create-board)" "(use 'seesaw.dev)" "(show-options (mig-panel))" "(use 'seesaw.mig)" "(show-options (mig-panel))" "(show-options (label))" "(create-board)" "(show-options (label))" "(create-board)" "(select the-frame [\:.info])" "(select the-frame [\:info])" "(select the-frame [\:.info])" "{}" "(update-in {} [\:ss] conj 3)" "(update-in {} [\:ss] conj 33)" "(-> (update-in {} [\:ss] conj 33) (update-in [\:ss] conj 33))" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.board namespace" "(create-board)" "(display-message \\"FOOO\\")" "(.reapint the-frame)" "(.repaint the-frame)" "(display-message \\"FOOOdADADAdAS\\")" "(display-message \\"FOOO\\")" "(create-board)" "(display-message \\"FOOOasdadas1213\\")" "(display-message \\"123123132\\")" ";; Switching to client.board namespace" "(create-board)" "(display-message \\"FOOOasdadas1213\\")" ";; Switching to client.board namespace" "(create-board)" "(display-message \\"SOOOSKE\\")" "(create-board)" "(display-message \\"SOOOSKE\\")" "(create-board)" "(display-message \\"SOOOSKE\\")" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)" ";; Switching to client.core namespace" "(-main)"]
eclipse.preferences.version=1
